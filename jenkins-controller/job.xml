<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1289.vd1c337fd5354">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2125.vddb_a_44a_d605e"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2125.vddb_a_44a_d605e">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.37.0">
      <projectUrl>https://github.com/devkinetics/atlantis-test-repo.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3653.v07ea_433c90b_4">
    <script>
        pipeline {
            agent {
                label 'agent'
            }
            stages {
                stage('git checkout') {
                    steps {
                        echo 'git checkout'
                        git branch: 'main',
                            url: 'https://github.com/devkinetics/atlantis-test-repo.git'
                    }
                }

                stage('terraform init') {
                    steps {
                        echo 'terraform init'
                        script {
                            sh 'terraform init -no-color'
                        }
                    }
                }

                stage('terraform plan') {
                    steps {
                        echo 'terraform plan'
                        script {
                            sh 'terraform plan -out=tfplan -input=false -no-color'
                        }
                    }
                }

                stage('wait for approval (Apply)') {
                    steps {
                        timeout(time: 30, unit: 'MINUTES') {
                            script {
                                env.RELEASE_TO_PROD = input message: 'Please approve Terraform plan',
                                    parameters: [
                                        string(description: 'Type in \'yes\' if you want to deploy this terraform build in production. Only \'yes\' will be accepted to approve.',
                                            name: 'Promote to production?',
                                            trim: true)
                                    ]
                            }
                        }

                        echo "User input: ${env.RELEASE_TO_PROD}"
                    }
                }

                stage('terraform apply') {
                    when {
                        expression {
                            env.RELEASE_TO_PROD == 'yes'
                        }
                    }
                    steps {
                        echo 'terraform apply'
                        script {
                            sh 'terraform apply -auto-approve -no-color tfplan'
                        }
                    }
                }

                stage('wait for approval (Destroy)') {
                    steps {
                        timeout(time: 30, unit: 'MINUTES') {
                            script {
                                env.DESTROY = input message: 'Please approve Terraform destroy',
                                    parameters: [
                                        string(description: 'Type in \'yes\' if you want to destroy this terraform build. Only \'yes\' will be accepted to approve.',
                                            name: 'Destroy?',
                                            trim: true)
                                    ]
                            }
                        }

                        echo "User input: ${env.DESTROY}"
                    }
                }

                stage('terraform destroy') {
                    when {
                        expression {
                            env.DESTROY == 'yes'
                        }
                    }
                    steps {
                        echo 'terraform destroy'
                        script {
                            sh 'terraform destroy -auto-approve -no-color'
                        }
                    }
                }
            }

            post {
                always {
                    cleanWs()
                }
            }
        }
    </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
